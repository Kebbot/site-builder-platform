import { Component } from './../types/types';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
export const generateHTML = (components: Component[]): string => {
    const elementsHTML = components.map(component => {
        switch (component.type) {
            case 'text':
                return `    <div class="element-${component.id} text-element">
      ${component.props.text || '–¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞'}
    </div>`;

            case 'button':
                return `    <button class="element-${component.id} button-element">
      ${component.props.text || '–ö–Ω–æ–ø–∫–∞'}
    </button>`;

            case 'image':
                return `    <div class="element-${component.id} image-element">
      <div class="image-placeholder">
        üñºÔ∏è ${component.props.text || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
      </div>
    </div>`;

            case 'zeroblock':
                const zeroblockHTML = component.props.customHTML || '<div>ZeroBlock</div>';
                const zeroblockCSS = component.props.customCSS || '';
                const zeroblockJS = component.props.customJS || '';

                return `    <div class="element-${component.id} zeroblock-element">
      ${zeroblockHTML}
      <style>${zeroblockCSS}</style>
      <script>${zeroblockJS}</script>
    </div>`;

            default:
                return `    <div class="element-${component.id}">
      –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    </div>`;
        }
    }).join('\n');

    return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∞–π—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ</title>
    <style>
${generateCSS(components)}
    </style>
</head>
<body>
    <div class="container">
${elementsHTML}
    </div>
    
    <script>
${generateJS(components)}
    </script>
</body>
</html>`;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS —Å—Ç–∏–ª–µ–π
export const generateCSS = (components: Component[]): string => {
    const globalStyles = `        /* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f4f4f4;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .image-placeholder {
            background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: #666;
        }`;

    const componentStyles = components.map(component => {
        const styles = Object.entries(component.styles)
            .map(([property, value]) => `            ${property}: ${value};`)
            .join('\n');

        return `        .element-${component.id} {
${styles}
        }`;
    }).join('\n\n');

    return `${globalStyles}

${componentStyles}`;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JavaScript
export const generateJS = (components: Component[]): string => {
    const buttonComponents = components.filter(comp => comp.type === 'button');

    if (buttonComponents.length === 0) {
        return `        // JavaScript –∫–æ–¥ –±—É–¥–µ—Ç –∑–¥–µ—Å—å
        console.log('–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');`;
    }

    const buttonHandlers = buttonComponents.map(component => {
        return `        document.querySelector('.element-${component.id}').addEventListener('click', function() {
            alert('–ö–Ω–æ–ø–∫–∞ "${component.props.text || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" –Ω–∞–∂–∞—Ç–∞!');
        });`;
    }).join('\n');

    return `        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.addEventListener('DOMContentLoaded', function() {
${buttonHandlers}
        });`;
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞
export const downloadProject = (components: Component[], projectName: string = 'my-website') => {
    const htmlContent = generateHTML(components);
    const cssContent = generateCSS(components);
    const jsContent = generateJS(components);

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    const files = {
        'index.html': htmlContent,
        'styles.css': `/* –°—Ç–∏–ª–∏ –¥–ª—è ${projectName} */\n${cssContent}`,
        'script.js': `/* JavaScript –¥–ª—è ${projectName} */\n${jsContent}`,
        'README.txt': `–°–∞–π—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ —Å–∞–π—Ç–æ–≤\n\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n\n–§–∞–π–ª—ã:\n- index.html - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n- styles.css - —Å—Ç–∏–ª–∏\n- script.js - JavaScript –∫–æ–¥`
    };

    // –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–∫–∞ –±–µ–∑ ZIP)
    Object.entries(files).forEach(([filename, content]) => {
        downloadFile(filename, content);
    });
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
const downloadFile = (filename: string, content: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');

    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
};