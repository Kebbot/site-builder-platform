import React, { useState, useCallback, useEffect } from 'react';
import { DndContext, DragEndEvent, DragOverEvent } from '@dnd-kit/core';
import { arrayMove } from '@dnd-kit/sortable';
import { ThemeProvider, useTheme } from './contexts/ThemeContext';
import Palette from './components/Palette/Palette';
import Builder from './components/Builder/Builder';
import PropertiesPanel from './components/Properties/PropertiesPanel';
import TemplatePicker from './components/Templates/TemplatePicker';
import AnalyticsPanel from './components/Analytics/AnalyticsPanel';
import { Component, Template } from './types/types';
import { downloadProject } from './utils/exportUtils';
import { ContextHelper } from './components/ContextHelper/ContextHelper';
import './App.css';

// –î–µ–º–æ-—à–∞–±–ª–æ–Ω—ã
const demo_templates: Template[] = [
  {
    id: '1',
    name: '–ë–∏–∑–Ω–µ—Å-–ª–µ–Ω–¥–∏–Ω–≥',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
    category: 'landing',
    thumbnail: 'üíº',
    components: [
      {
        id: 'header-1',
        type: 'header',
        props: { text: '–ú–æ–π –ë–∏–∑–Ω–µ—Å' },
        styles: {
          backgroundColor: '#2d3748',
          color: 'white',
          padding: '1rem 2rem'
        }
      },
      {
        id: 'text-1',
        type: 'text',
        props: { text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–∏–∑–Ω–µ—Å' },
        styles: {
          padding: '2rem',
          textAlign: 'center',
          fontSize: '24px',
          backgroundColor: '#f7fafc'
        }
      }
    ]
  },
  {
    id: '2',
    name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
    description: '–ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã –≤ –ª—É—á—à–µ–º —Å–≤–µ—Ç–µ',
    category: 'portfolio',
    thumbnail: 'üé®',
    components: [
      {
        id: 'header-2',
        type: 'header',
        props: { text: '–ú–æ–µ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' },
        styles: {
          backgroundColor: '#4c51bf',
          color: 'white',
          padding: '1rem 2rem'
        }
      },
      {
        id: 'card-1',
        type: 'card',
        props: { text: '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã' },
        styles: {
          margin: '2rem',
          padding: '0',
          backgroundColor: 'white',
          borderRadius: '8px'
        }
      }
    ]
  }
];

// –•—É–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function useHistory<T>(initialState: T) {
  const [history, setHistory] = useState<T[]>([initialState]);
  const [index, setIndex] = useState(0);
  const currentState = history[index];

  const push = useCallback((newState: T) => {
    const newHistory = history.slice(0, index + 1);
    newHistory.push(newState);
    setHistory(newHistory);
    setIndex(newHistory.length - 1);
  }, [history, index]);

  const undo = useCallback(() => {
    if (index > 0) {
      setIndex(index - 1);
    }
  }, [index]);

  const redo = useCallback(() => {
    if (index < history.length - 1) {
      setIndex(index + 1);
    }
  }, [index, history.length]);

  return {
    state: currentState,
    push,
    undo,
    redo,
    canUndo: index > 0,
    canRedo: index < history.length - 1
  };
}

function AppContent() {
  const { theme, toggleTheme } = useTheme();
  const {
    state: components,
    push: pushHistory,
    undo,
    redo,
    canUndo,
    canRedo
  } = useHistory<Component[]>([]);

  const [selectedComponent, setSelectedComponent] = useState<Component | null>(null);
  const [projectName, setProjectName] = useState<string>('–ú–æ–π–°–∞–π—Ç');
  const [showTemplates, setShowTemplates] = useState<boolean>(false);
  const [clipboard, setClipboard] = useState<Component | null>(null);
  const [showCopyToast, setShowCopyToast] = useState<boolean>(false);
  const [showAnalytics, setShowAnalytics] = useState<boolean>(false);

  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–µ–π
  const [isPaletteVisible, setIsPaletteVisible] = useState(true);
  const [isPropertiesVisible, setIsPropertiesVisible] = useState(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
  const setComponents = useCallback((newComponents: Component[]) => {
    pushHistory(newComponents);
  }, [pushHistory]);

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (!over) return;

    const elementType = active.data.current?.type;
    const isContainerDrop = over.data.current?.isContainer;
    const containerId = isContainerDrop ? over.id.toString().replace('container-', '') : null;

    console.log('DRAG DEBUG:', { elementType, isContainerDrop, containerId, over: over.id });

    // –°–õ–£–ß–ê–ô 1: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (isContainerDrop && containerId && elementType) {
      const newComponent: Component = {
        id: `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        type: elementType as any,
        props: {
          text: getDefaultText(elementType)
        },
        styles: getDefaultStyles(elementType)
      };

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç
      const updatedComponents = addComponentToContainer(components, containerId, newComponent);
      setComponents(updatedComponents);
      return;
    }

    // –°–õ–£–ß–ê–ô 2: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    if (over.id === 'builder-dropzone' && elementType) {
      const newComponent: Component = {
        id: `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        type: elementType as any,
        props: {
          text: getDefaultText(elementType)
        },
        styles: getDefaultStyles(elementType)
      };

      setComponents([...components, newComponent]);
    }
  };


  const handleDragOver = (event: DragOverEvent) => {
    const { active, over } = event;

    if (!over) return;

    const activeId = active.id;
    const overId = over.id;

    if (activeId === overId) return;

    const activeIndex = components.findIndex((comp) => comp.id === activeId);
    const overIndex = components.findIndex((comp) => comp.id === overId);

    if (activeIndex !== -1 && overIndex !== -1) {
      const newComponents = arrayMove(components, activeIndex, overIndex);
      setComponents(newComponents);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const getDefaultText = (type: string) => {
    switch (type) {
      case 'text': return '–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫';
      case 'button': return '–ù–∞–∂–º–∏ –º–µ–Ω—è';
      case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
      case 'header': return '–ú–æ–π —Å–∞–π—Ç';
      case 'footer': return '–ú–æ–π —Å–∞–π—Ç';
      case 'card': return '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏';
      case 'form': return '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏';
      case 'input': return '';
      case 'zeroblock': return 'ZeroBlock';
      // –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ô–ù–ï–†–´
      case 'section': return '–°–µ–∫—Ü–∏—è';
      case 'grid': return 'Grid —Å–µ—Ç–∫–∞';
      case 'flex': return 'Flex –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä';
      // E-COMMERCE –ö–û–ú–ü–û–ù–ï–ù–¢–´
      case 'product-card': return '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
      case 'product-grid': return '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤';
      case 'shopping-cart': return '–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫';
      case 'checkout-form': return '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞';
      case 'product-rating': return '–†–µ–π—Ç–∏–Ω–≥';
      default: return '–≠–ª–µ–º–µ–Ω—Ç';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const getDefaultStyles = (type: string): Component['styles'] => {
    const baseStyles: Component['styles'] = {
      margin: '5px',
      padding: '10px',
      border: '1px solid #ddd',
      backgroundColor: '#fff',
      borderRadius: '4px'
    };

    switch (type) {
      case 'text':
        return {
          ...baseStyles,
          minHeight: '40px',
          display: 'flex',
          alignItems: 'center'
        };
      case 'button':
        return {
          ...baseStyles,
          backgroundColor: '#2196f3',
          color: 'white',
          border: 'none',
          cursor: 'pointer',
          width: 'auto',
          display: 'inline-block'
        };
      case 'image':
        return {
          ...baseStyles,
          minHeight: '100px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: '#f5f5f5'
        };
      case 'header':
        return {
          ...baseStyles,
          backgroundColor: '#2d3748',
          color: 'white',
          padding: '1rem 2rem',
          margin: '0',
          width: '100%'
        };
      case 'footer':
        return {
          ...baseStyles,
          backgroundColor: '#4a5568',
          color: 'white',
          padding: '2rem',
          margin: '2rem 0 0 0',
          width: '100%'
        };
      case 'card':
        return {
          ...baseStyles,
          backgroundColor: 'white',
          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
          padding: '0'
        };
      case 'form':
        return {
          ...baseStyles,
          backgroundColor: 'white',
          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
        };
      case 'input':
        return {
          ...baseStyles,
          padding: '8px'
        };
      case 'zeroblock':
        return {
          ...baseStyles,
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', // ‚Üê –û–°–¢–ê–í–õ–Ø–ï–ú background
          color: 'white',
          minHeight: '150px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          border: '2px dashed rgba(255, 255, 255, 0.3)'
        };
      case 'section':
        return {
          ...baseStyles,
          height: '200px',
          backgroundColor: '#f7fafc',
          border: '2px dashed #cbd5e0',
          display: 'flex',
          flexDirection: 'column',
          padding: '20px'
        };
      case 'grid':
        return {
          ...baseStyles,
          height: '200px',
          backgroundColor: '#fff5f5',
          border: '2px dashed #fed7d7',
          display: 'grid',
          gridTemplateColumns: 'repeat(2, 1fr)',
          gridGap: '10px',
          padding: '15px'
        };
      case 'flex':
        return {
          ...baseStyles,
          height: '150px',
          backgroundColor: '#f0fff4',
          border: '2px dashed #c6f6d5',
          display: 'flex',
          flexDirection: 'row',
          alignItems: 'center',
          justifyContent: 'center',
          padding: '15px'
        };
      case 'product-card':
        return {
          ...baseStyles,
          width: '300px',
          height: '400px',
          backgroundColor: 'white',
          border: '1px solid #e2e8f0',
          borderRadius: '12px',
          overflow: 'hidden',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
          display: 'flex',
          flexDirection: 'column'
        };
      case 'product-grid':
        return {
          ...baseStyles,
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
          gridGap: '20px',
          padding: '20px',
          backgroundColor: '#f7fafc'
        };
      case 'shopping-cart':
        return {
          ...baseStyles,
          width: '350px',
          height: '200px',
          backgroundColor: 'white',
          border: '1px solid #e2e8f0',
          borderRadius: '8px',
          padding: '20px',
          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)'
        };
      case 'checkout-form':
        return {
          ...baseStyles,
          width: '400px',
          backgroundColor: 'white',
          border: '1px solid #e2e8f0',
          borderRadius: '8px',
          padding: '24px',
          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)'
        };
      case 'product-rating':
        return {
          ...baseStyles,
          display: 'flex',
          alignItems: 'center',
          gap: '4px',
          padding: '8px 12px',
          backgroundColor: 'white',
          border: '1px solid #e2e8f0',
          borderRadius: '20px',
          width: 'fit-content'
        };
      default:
        return baseStyles;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const updateComponent = (updatedComponent: Component) => {
    const newComponents = components.map(comp =>
      comp.id === updatedComponent.id ? updatedComponent : comp
    );
    setComponents(newComponents);
    setSelectedComponent(updatedComponent);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const deleteComponent = (componentId: string) => {
    const newComponents = components.filter(comp => comp.id !== componentId);
    setComponents(newComponents);
    if (selectedComponent?.id === componentId) {
      setSelectedComponent(null);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const copyComponent = (component: Component) => {
    setClipboard(component);
    setShowCopyToast(true);
    setTimeout(() => setShowCopyToast(false), 2000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  const pasteComponent = () => {
    if (clipboard) {
      const newComponent: Component = {
        ...clipboard,
        id: `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
      };
      setComponents([...components, newComponent]);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const duplicateComponent = (component: Component) => {
    const newComponent: Component = {
      ...component,
      id: `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };
    setComponents([...components, newComponent]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const handleExport = () => {
    if (components.length === 0) {
      alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º!');
      return;
    }

    downloadProject(components, projectName);
    alert(`–ü—Ä–æ–µ–∫—Ç "${projectName}" —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫.`);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
  const handleTemplateSelect = (template: Template) => {
    setComponents(template.components);
    setShowTemplates(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setSelectedComponent(null);
      }

      if (event.ctrlKey || event.metaKey) {
        event.preventDefault();
        event.stopPropagation();

        switch (event.key.toLowerCase()) {
          case 'c':
          case '—Å':
            if (selectedComponent) {
              setClipboard(selectedComponent);
              setShowCopyToast(true);
              setTimeout(() => setShowCopyToast(false), 2000);
            }
            break;

          case 'v':
          case '–º':
            if (clipboard) {
              const newComponent = {
                ...clipboard,
                id: `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
              };
              const newComponents = [...components, newComponent];
              setComponents(newComponents);
            }
            break;

          case 'd':
          case '–≤':
            if (selectedComponent) {
              const newComponent = {
                ...selectedComponent,
                id: `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
              };
              const newComponents = [...components, newComponent];
              setComponents(newComponents);
            }
            break;

          case 'z':
            if (event.shiftKey) {
              redo();
            } else {
              undo();
            }
            break;

          case 'y':
            redo();
            break;
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown, true);
    return () => {
      document.removeEventListener('keydown', handleKeyDown, true);
    };
  }, [components, selectedComponent, clipboard, undo, redo, setComponents]);

  return (
    <DndContext onDragEnd={handleDragEnd} onDragOver={handleDragOver}>
      <div className="app">
        <header className="app-header">
          <div className="header-content">
            <div className="header-title">
              <h1>üöÄ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤</h1>
              <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π no-code –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä</p>
            </div>
            <div className="header-controls">
              {/* –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π */}
              <button
                onClick={() => setIsPaletteVisible(!isPaletteVisible)}
                className="panel-toggle"
                title={isPaletteVisible ? '–°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤'}
              >
                {isPaletteVisible ? '‚óÄÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã' : '–≠–ª–µ–º–µ–Ω—Ç—ã ‚ñ∂Ô∏è'}
              </button>
              <ContextHelper components={components} />
              <button
                onClick={() => setShowAnalytics(true)}
                className="analytics-button"
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
              >
                üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </button>

              <button
                onClick={toggleTheme}
                className="theme-toggle"
                title={theme === 'light' ? '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞' : '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'}
              >
                {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
              </button>

              <button
                onClick={() => setShowTemplates(true)}
                className="template-button"
              >
                üé® –®–∞–±–ª–æ–Ω—ã
              </button>

              <div className="history-controls">
                <button
                  onClick={undo}
                  disabled={!canUndo}
                  className="history-btn"
                  title="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)"
                >
                  ‚Ü©Ô∏è
                </button>
                <button
                  onClick={redo}
                  disabled={!canRedo}
                  className="history-btn"
                  title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y)"
                >
                  ‚Ü™Ô∏è
                </button>
              </div>

              <button
                onClick={() => setIsPropertiesVisible(!isPropertiesVisible)}
                className="panel-toggle"
                title={isPropertiesVisible ? '–°–∫—Ä—ã—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞'}
              >
                {isPropertiesVisible ? '–°–≤–æ–π—Å—Ç–≤–∞ ‚ñ∂Ô∏è' : '‚óÄÔ∏è –°–≤–æ–π—Å—Ç–≤–∞'}
              </button>

              <input
                type="text"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                className="project-name-input"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
              />

              <button
                onClick={handleExport}
                className="export-button"
                disabled={components.length === 0}
              >
                üì¶ –≠–∫—Å–ø–æ—Ä—Ç
              </button>
            </div>
          </div>
        </header>

        <div className="app-body">
          {/* –ü–∞–Ω–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ */}
          {isPaletteVisible && <Palette />}

          {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
          <Builder
            components={components}
            selectedComponent={selectedComponent}
            onSelectComponent={setSelectedComponent}
            onDeleteComponent={deleteComponent}
            onUpdateComponent={updateComponent}
            onCopyComponent={copyComponent}
            onDuplicateComponent={duplicateComponent}
          />

          {/* –ü–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤ - —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ */}
          {isPropertiesVisible && (
            <PropertiesPanel
              component={selectedComponent}
              onUpdateComponent={updateComponent}
              onDeleteComponent={deleteComponent}
              onCopyComponent={copyComponent}
              onDuplicateComponent={duplicateComponent}
            />
          )}
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
        {showTemplates && (
          <TemplatePicker
            templates={demo_templates}
            onTemplateSelect={handleTemplateSelect}
            onClose={() => setShowTemplates(false)}
          />
        )}

        {showAnalytics && (
          <AnalyticsPanel
            components={components}
            isOpen={showAnalytics}
            onClose={() => setShowAnalytics(false)}
          />
        )}

        {showCopyToast && (
          <div className="toast">
            ‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
          </div>
        )}
      </div>
    </DndContext>
  );
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –í–ù–ï –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const addComponentToContainer = (components: Component[], containerId: string, newComponent: Component): Component[] => {
  return components.map(comp => {
    if (comp.id === containerId) {
      return {
        ...comp,
        children: [...(comp.children || []), newComponent]
      };
    }

    if (comp.children) {
      return {
        ...comp,
        children: addComponentToContainer(comp.children, containerId, newComponent)
      };
    }

    return comp;
  });
};
// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
function App() {
  return (
    <ThemeProvider>
      <AppContent />
    </ThemeProvider>
  );
}

export default App;