import React, { useState, useCallback, useMemo } from 'react';
import { BuilderElement, Container, PropertyGroup, Project } from '../../types/types';
import { useTheme } from '../../contexts/ThemeContext';
import './PropertiesPanel.css';

interface PropertiesPanelProps {
    selectedElement: BuilderElement | null;
    selectedContainer: Container | null;
    project: Project;
    onElementUpdate: (elementId: string, updates: Partial<BuilderElement>) => void;
    onContainerUpdate: (containerId: string, updates: Partial<Container>) => void;
    onProjectUpdate: (updates: Partial<Project>) => void;
}

export const PropertiesPanel: React.FC<PropertiesPanelProps> = ({
    selectedElement,
    selectedContainer,
    project,
    onElementUpdate,
    onContainerUpdate,
    onProjectUpdate
}) => {
    const { theme, getColor, getBorderRadius } = useTheme();
    const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set(['layout', 'typography']));

    // –ì—Ä—É–ø–ø—ã —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const elementPropertyGroups = useMemo((): PropertyGroup[] => {
        if (!selectedElement) return [];

        const baseGroups: PropertyGroup[] = [
            {
                id: 'layout',
                name: '–ú–∞–∫–µ—Ç',
                icon: 'üìê',
                properties: [
                    {
                        id: 'position-x',
                        name: '–ü–æ–∑–∏—Ü–∏—è X',
                        type: 'number',
                        value: selectedElement.position.x,
                        unit: 'px',
                        min: 0,
                        category: 'layout'
                    },
                    {
                        id: 'position-y',
                        name: '–ü–æ–∑–∏—Ü–∏—è Y',
                        type: 'number',
                        value: selectedElement.position.y,
                        unit: 'px',
                        min: 0,
                        category: 'layout'
                    },
                    {
                        id: 'width',
                        name: '–®–∏—Ä–∏–Ω–∞',
                        type: 'number',
                        value: typeof selectedElement.position.width === 'number'
                            ? selectedElement.position.width
                            : parseInt(selectedElement.position.width as string),
                        unit: 'px',
                        min: 10,
                        max: 2000,
                        category: 'layout'
                    },
                    {
                        id: 'height',
                        name: '–í—ã—Å–æ—Ç–∞',
                        type: 'number',
                        value: typeof selectedElement.position.height === 'number'
                            ? selectedElement.position.height
                            : parseInt(selectedElement.position.height as string),
                        unit: 'px',
                        min: 10,
                        max: 2000,
                        category: 'layout'
                    },
                    {
                        id: 'zIndex',
                        name: 'Z-Index',
                        type: 'number',
                        value: selectedElement.position.zIndex,
                        min: 0,
                        max: 9999,
                        category: 'layout'
                    }
                ]
            },
            {
                id: 'typography',
                name: '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è',
                icon: 'üî§',
                properties: [
                    {
                        id: 'fontSize',
                        name: '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞',
                        type: 'number',
                        value: selectedElement.style.fontSize || 16,
                        unit: 'px',
                        min: 8,
                        max: 72,
                        category: 'typography'
                    },
                    {
                        id: 'fontWeight',
                        name: '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å',
                        type: 'select',
                        value: selectedElement.style.fontWeight || 'normal',
                        options: [
                            { label: '–¢–æ–Ω–∫–∏–π', value: '100' },
                            { label: '–°–≤–µ—Ç–ª—ã–π', value: '300' },
                            { label: '–û–±—ã—á–Ω—ã–π', value: 'normal' },
                            { label: '–°—Ä–µ–¥–Ω–∏–π', value: '500' },
                            { label: '–ü–æ–ª—É–∂–∏—Ä–Ω—ã–π', value: '600' },
                            { label: '–ñ–∏—Ä–Ω—ã–π', value: 'bold' },
                            { label: '–ß–µ—Ä–Ω—ã–π', value: '900' }
                        ],
                        category: 'typography'
                    },
                    {
                        id: 'textAlign',
                        name: '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ',
                        type: 'select',
                        value: selectedElement.style.textAlign || 'left',
                        options: [
                            { label: '–°–ª–µ–≤–∞', value: 'left' },
                            { label: '–ü–æ —Ü–µ–Ω—Ç—Ä—É', value: 'center' },
                            { label: '–°–ø—Ä–∞–≤–∞', value: 'right' },
                            { label: '–ü–æ —à–∏—Ä–∏–Ω–µ', value: 'justify' }
                        ],
                        category: 'typography'
                    },
                    {
                        id: 'color',
                        name: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞',
                        type: 'color',
                        value: selectedElement.style.color || getColor('text'),
                        category: 'typography'
                    },
                    {
                        id: 'lineHeight',
                        name: '–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
                        type: 'range',
                        value: selectedElement.style.lineHeight || 1.5,
                        min: 1,
                        max: 3,
                        step: 0.1,
                        category: 'typography'
                    }
                ]
            },
            {
                id: 'background',
                name: '–§–æ–Ω',
                icon: 'üé®',
                properties: [
                    {
                        id: 'backgroundColor',
                        name: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞',
                        type: 'color',
                        value: selectedElement.style.backgroundColor || 'transparent',
                        category: 'background'
                    },
                    {
                        id: 'backgroundImage',
                        name: '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                        type: 'image',
                        value: selectedElement.style.backgroundImage || '',
                        category: 'background'
                    },
                    {
                        id: 'opacity',
                        name: '–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å',
                        type: 'range',
                        value: selectedElement.style.opacity || 1,
                        min: 0,
                        max: 1,
                        step: 0.1,
                        category: 'background'
                    }
                ]
            },
            {
                id: 'border',
                name: '–ì—Ä–∞–Ω–∏—Ü–∞',
                icon: 'üî≤',
                properties: [
                    {
                        id: 'border',
                        name: '–ì—Ä–∞–Ω–∏—Ü–∞',
                        type: 'text',
                        value: selectedElement.style.border || '',
                        category: 'border'
                    },
                    {
                        id: 'borderRadius',
                        name: '–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤',
                        type: 'text',
                        value: selectedElement.style.borderRadius || '0px',
                        category: 'border'
                    },
                    {
                        id: 'borderColor',
                        name: '–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã',
                        type: 'color',
                        value: selectedElement.style.borderColor || '#d1d5db',
                        category: 'border'
                    }
                ]
            },
            {
                id: 'effects',
                name: '–≠—Ñ—Ñ–µ–∫—Ç—ã',
                icon: '‚ú®',
                properties: [
                    {
                        id: 'boxShadow',
                        name: '–¢–µ–Ω—å',
                        type: 'shadow',
                        value: selectedElement.style.boxShadow || '',
                        category: 'effects'
                    },
                    {
                        id: 'transform',
                        name: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è',
                        type: 'text',
                        value: selectedElement.style.transform || '',
                        category: 'effects'
                    },
                    {
                        id: 'transition',
                        name: '–ü–µ—Ä–µ—Ö–æ–¥',
                        type: 'text',
                        value: selectedElement.style.transition || '',
                        category: 'effects'
                    }
                ]
            },
            {
                id: 'advanced',
                name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
                icon: '‚öôÔ∏è',
                properties: [
                    {
                        id: 'className',
                        name: 'CSS –∫–ª–∞—Å—Å',
                        type: 'text',
                        value: selectedElement.props?.className || '',
                        category: 'advanced'
                    },
                    {
                        id: 'id',
                        name: 'ID —ç–ª–µ–º–µ–Ω—Ç–∞',
                        type: 'text',
                        value: selectedElement.props?.id || '',
                        category: 'advanced'
                    },
                    {
                        id: 'customCSS',
                        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS',
                        type: 'text',
                        value: selectedElement.props?.customCSS || '',
                        category: 'advanced'
                    }
                ]
            }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (selectedElement.type === 'button') {
            baseGroups.find(g => g.id === 'typography')?.properties.push(
                {
                    id: 'buttonVariant',
                    name: '–í–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∏',
                    type: 'select',
                    value: selectedElement.props?.variant || 'primary',
                    options: [
                        { label: '–û—Å–Ω–æ–≤–Ω–∞—è', value: 'primary' },
                        { label: '–í—Ç–æ—Ä–∏—á–Ω–∞—è', value: 'secondary' },
                        { label: '–¢–µ–∫—Å—Ç–æ–≤–∞—è', value: 'text' },
                        { label: '–° –æ–±–≤–æ–¥–∫–æ–π', value: 'outline' }
                    ],
                    category: 'typography'
                }
            );
        }

        if (selectedElement.type === 'image') {
            baseGroups.find(g => g.id === 'advanced')?.properties.unshift(
                {
                    id: 'altText',
                    name: 'Alt —Ç–µ–∫—Å—Ç',
                    type: 'text',
                    value: selectedElement.props?.alt || '',
                    category: 'advanced'
                },
                {
                    id: 'objectFit',
                    name: '–û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                    type: 'select',
                    value: selectedElement.style.objectFit || 'cover',
                    options: [
                        { label: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å', value: 'fill' },
                        { label: '–û–±—Ä–µ–∑–∞—Ç—å', value: 'cover' },
                        { label: '–í–ø–∏—Å–∞—Ç—å', value: 'contain' },
                        { label: '–ü–æ —Ä–∞–∑–º–µ—Ä—É', value: 'none' },
                        { label: '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å', value: 'scale-down' }
                    ],
                    category: 'advanced'
                }
            );
        }

        return baseGroups;
    }, [selectedElement, theme]);

    // –ì—Ä—É–ø–ø—ã —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const containerPropertyGroups = useMemo((): PropertyGroup[] => {
        if (!selectedContainer) return [];

        return [
            {
                id: 'container-layout',
                name: '–ú–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
                icon: 'üìê',
                properties: [
                    {
                        id: 'containerWidth',
                        name: '–®–∏—Ä–∏–Ω–∞',
                        type: 'text',
                        value: selectedContainer.style.width,
                        category: 'layout'
                    },
                    {
                        id: 'containerHeight',
                        name: '–í—ã—Å–æ—Ç–∞',
                        type: 'text',
                        value: selectedContainer.style.height,
                        category: 'layout'
                    },
                    {
                        id: 'minHeight',
                        name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞',
                        type: 'text',
                        value: selectedContainer.style.minHeight,
                        category: 'layout'
                    }
                ]
            },
            {
                id: 'container-background',
                name: '–§–æ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
                icon: 'üé®',
                properties: [
                    {
                        id: 'containerBackgroundColor',
                        name: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞',
                        type: 'color',
                        value: selectedContainer.style.backgroundColor,
                        category: 'background'
                    },
                    {
                        id: 'containerBackgroundImage',
                        name: '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                        type: 'image',
                        value: selectedContainer.style.backgroundImage || '',
                        category: 'background'
                    }
                ]
            }
        ];
    }, [selectedContainer]);

    // –ì—Ä—É–ø–ø—ã —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    const projectPropertyGroups = useMemo((): PropertyGroup[] => {
        return [
            {
                id: 'page-settings',
                name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                icon: 'üìÑ',
                properties: [
                    {
                        id: 'pageWidth',
                        name: '–®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                        type: 'select',
                        value: project.settings.pageWidth,
                        options: [
                            { label: '–ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞', value: '100%' },
                            { label: '1200px', value: '1200px' },
                            { label: '992px', value: '992px' },
                            { label: '768px', value: '768px' }
                        ],
                        category: 'layout'
                    },
                    {
                        id: 'pageBackground',
                        name: '–§–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                        type: 'color',
                        value: project.settings.pageBackground,
                        category: 'background'
                    },
                    {
                        id: 'pageTitle',
                        name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                        type: 'text',
                        value: project.settings.title,
                        category: 'content'
                    }
                ]
            },
            {
                id: 'builder-settings',
                name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞',
                icon: '‚öôÔ∏è',
                properties: [
                    {
                        id: 'gridEnabled',
                        name: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ—Ç–∫—É',
                        type: 'boolean',
                        value: project.settings.grid,
                        category: 'layout'
                    },
                    {
                        id: 'snapEnabled',
                        name: '–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É',
                        type: 'boolean',
                        value: project.settings.snap,
                        category: 'layout'
                    },
                    {
                        id: 'viewport',
                        name: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
                        type: 'select',
                        value: project.settings.viewport,
                        options: [
                            { label: '–î–µ—Å–∫—Ç–æ–ø', value: 'desktop' },
                            { label: '–ü–ª–∞–Ω—à–µ—Ç', value: 'tablet' },
                            { label: '–ú–æ–±–∏–ª—å–Ω—ã–π', value: 'mobile' }
                        ],
                        category: 'layout'
                    }
                ]
            }
        ];
    }, [project]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
    const handlePropertyChange = useCallback((propertyId: string, value: any) => {
        if (selectedElement) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
            if (propertyId.startsWith('position-')) {
                const positionField = propertyId.replace('position-', '');
                onElementUpdate(selectedElement.id, {
                    position: { ...selectedElement.position, [positionField]: value }
                });
            } else if (['width', 'height', 'zIndex'].includes(propertyId)) {
                onElementUpdate(selectedElement.id, {
                    position: { ...selectedElement.position, [propertyId]: value }
                });
            } else {
                onElementUpdate(selectedElement.id, {
                    style: { ...selectedElement.style, [propertyId]: value }
                });
            }
        } else if (selectedContainer) {
            if (propertyId.startsWith('container')) {
                const styleField = propertyId.replace('container', '').replace(/^[A-Z]/, match => match.toLowerCase());
                onContainerUpdate(selectedContainer.id, {
                    style: { ...selectedContainer.style, [styleField]: value }
                });
            }
        } else {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
            if (propertyId === 'pageWidth' || propertyId === 'pageBackground' || propertyId === 'pageTitle') {
                const settingsField = propertyId.replace('page', '').replace(/^[A-Z]/, match => match.toLowerCase());
                onProjectUpdate({
                    settings: { ...project.settings, [settingsField]: value }
                });
            } else if (propertyId === 'gridEnabled' || propertyId === 'snapEnabled' || propertyId === 'viewport') {
                const settingsField = propertyId.replace('Enabled', '').toLowerCase();
                onProjectUpdate({
                    settings: { ...project.settings, [settingsField]: value }
                });
            }
        }
    }, [selectedElement, selectedContainer, project, onElementUpdate, onContainerUpdate, onProjectUpdate]);

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≥—Ä—É–ø–ø—ã
    const toggleGroup = useCallback((groupId: string) => {
        setExpandedGroups(prev => {
            const newSet = new Set(prev);
            if (newSet.has(groupId)) {
                newSet.delete(groupId);
            } else {
                newSet.add(groupId);
            }
            return newSet;
        });
    }, []);

    // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–∞ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞
    const renderPropertyControl = (property: any) => {
        const commonProps = {
            key: property.id,
            value: property.value,
            onChange: (value: any) => handlePropertyChange(property.id, value),
            className: 'property-control'
        };

        switch (property.type) {
            case 'text':
                return (
                    <input
                        type="text"
                        {...commonProps}
                        placeholder={property.name}
                    />
                );

            case 'number':
                return (
                    <div className="number-control">
                        <input
                            type="number"
                            {...commonProps}
                            min={property.min}
                            max={property.max}
                            step={property.step}
                        />
                        {property.unit && <span className="property-unit">{property.unit}</span>}
                    </div>
                );

            case 'color':
                return (
                    <div className="color-control">
                        <input
                            type="color"
                            {...commonProps}
                        />
                        <span className="color-value">{property.value}</span>
                    </div>
                );

            case 'select':
                return (
                    <select {...commonProps}>
                        {property.options?.map((option: any) => (
                            <option key={option.value} value={option.value}>
                                {option.label}
                            </option>
                        ))}
                    </select>
                );

            case 'boolean':
                return (
                    <label className="boolean-control">
                        <input
                            type="checkbox"
                            checked={!!property.value}
                            onChange={(e) => commonProps.onChange(e.target.checked)}
                        />
                        <span className="boolean-slider"></span>
                    </label>
                );

            case 'range':
                return (
                    <div className="range-control">
                        <input
                            type="range"
                            {...commonProps}
                            min={property.min}
                            max={property.max}
                            step={property.step}
                        />
                        <span className="range-value">{property.value}</span>
                    </div>
                );

            case 'image':
                return (
                    <div className="image-control">
                        <input
                            type="text"
                            {...commonProps}
                            placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        />
                        <button className="browse-button">–û–±–∑–æ—Ä</button>
                    </div>
                );

            default:
                return (
                    <input
                        type="text"
                        {...commonProps}
                        placeholder={property.name}
                    />
                );
        }
    };

    // –†–µ–Ω–¥–µ—Ä –≥—Ä—É–ø–ø —Å–≤–æ–π—Å—Ç–≤
    const renderPropertyGroups = (groups: PropertyGroup[]) => {
        return groups.map(group => (
            <div key={group.id} className="property-group">
                <div
                    className="property-group-header"
                    onClick={() => toggleGroup(group.id)}
                >
                    <span className="group-icon">{group.icon}</span>
                    <span className="group-name">{group.name}</span>
                    <span className="group-toggle">
                        {expandedGroups.has(group.id) ? '‚ñº' : '‚ñ∫'}
                    </span>
                </div>

                {expandedGroups.has(group.id) && (
                    <div className="property-group-content">
                        {group.properties.map(property => (
                            <div key={property.id} className="property-item">
                                <label className="property-label">
                                    {property.name}
                                </label>
                                <div className="property-control-wrapper">
                                    {renderPropertyControl(property)}
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        ));
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª–∏
    const getPanelContent = () => {
        if (selectedElement) {
            return (
                <>
                    <div className="properties-header">
                        <div className="element-info">
                            <span className="element-icon">{selectedElement.metadata.icon}</span>
                            <div className="element-details">
                                <h3 className="element-name">{selectedElement.metadata.name}</h3>
                                <span className="element-type">{selectedElement.type}</span>
                            </div>
                        </div>
                    </div>
                    {renderPropertyGroups(elementPropertyGroups)}
                </>
            );
        }

        if (selectedContainer) {
            return (
                <>
                    <div className="properties-header">
                        <div className="element-info">
                            <span className="element-icon">üì¶</span>
                            <div className="element-details">
                                <h3 className="element-name">{selectedContainer.name}</h3>
                                <span className="element-type">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ({selectedContainer.type})</span>
                            </div>
                        </div>
                    </div>
                    {renderPropertyGroups(containerPropertyGroups)}
                </>
            );
        }

        return (
            <>
                <div className="properties-header">
                    <div className="element-info">
                        <span className="element-icon">üìÑ</span>
                        <div className="element-details">
                            <h3 className="element-name">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                            <span className="element-type">{project.name}</span>
                        </div>
                    </div>
                </div>
                {renderPropertyGroups(projectPropertyGroups)}
            </>
        );
    };

    return (
        <div className="properties-panel">
            <div className="properties-content">
                {getPanelContent()}
            </div>

            {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ */}
            {!selectedElement && !selectedContainer && (
                <div className="properties-empty">
                    <div className="empty-icon">‚öôÔ∏è</div>
                    <div className="empty-text">–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
                    <div className="empty-hint">
                        –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Ö–æ–ª—Å—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
                    </div>
                </div>
            )}
        </div>
    );
};

export default PropertiesPanel;