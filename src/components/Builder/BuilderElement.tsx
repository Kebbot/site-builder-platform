import React from 'react';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { Component } from '../../types/types';
import { ContainerDropZone } from './ContainerDropZone';
import './BuilderElement.css';

interface BuilderElementProps {
    component: Component;
    isSelected: boolean;
    onSelect: (component: Component) => void;
    onDelete: (componentId: string) => void;
    onUpdateComponent?: (component: Component) => void;
    onCopyComponent?: (component: Component) => void;
    onDuplicateComponent?: (component: Component) => void;
    isPreviewMode?: boolean;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Ç–∏–ø–∞
const getElementTypeLabel = (type: string) => {
    switch (type) {
        case 'text': return '–¢–µ–∫—Å—Ç';
        case 'button': return '–ö–Ω–æ–ø–∫–∞';
        case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
        case 'header': return '–®–∞–ø–∫–∞';
        case 'footer': return '–ü–æ–¥–≤–∞–ª';
        case 'card': return '–ö–∞—Ä—Ç–æ—á–∫–∞';
        case 'form': return '–§–æ—Ä–º–∞';
        case 'input': return '–ü–æ–ª–µ –≤–≤–æ–¥–∞';
        case 'zeroblock': return 'ZeroBlock';
        case 'section': return '–°–µ–∫—Ü–∏—è';
        case 'grid': return 'Grid';
        case 'flex': return 'Flex';
        case 'product-card': return '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞';
        case 'product-grid': return '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤';
        case 'shopping-cart': return '–ö–æ—Ä–∑–∏–Ω–∞';
        case 'checkout-form': return '–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞';
        case 'product-rating': return '–†–µ–π—Ç–∏–Ω–≥';
        default: return '–≠–ª–µ–º–µ–Ω—Ç';
    }
};

const BuilderElement: React.FC<BuilderElementProps> = ({
    component,
    isSelected,
    onSelect,
    onDelete,
    onUpdateComponent,
    onCopyComponent,
    onDuplicateComponent,
    isPreviewMode = false
}) => {
    // –•—É–∫ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const {
        attributes,
        listeners,
        setNodeRef,
        transform,
        transition,
        isDragging,
    } = useSortable({ id: component.id });

    const style = {
        transform: CSS.Transform.toString(transform),
        transition,
        opacity: isDragging ? 0.5 : 1,
    };

    const handleClick = (e: React.MouseEvent) => {
        e.stopPropagation();
        if (!isPreviewMode && !isDragging) {
            onSelect(component);
        }
    };

    const handleDelete = (e: React.MouseEvent) => {
        e.stopPropagation();
        onDelete(component.id);
    };

    const getSafeStyles = () => {
        const {
            flexDirection,
            alignItems,
            justifyContent,
            display,
            gridTemplateColumns,
            gridGap,
            flexWrap,
            ...safeStyles
        } = component.styles;

        const result: React.CSSProperties = {
            ...safeStyles,
            position: 'relative' as 'relative'
        };

        if (flexDirection) result.flexDirection = flexDirection as 'row' | 'column' | 'row-reverse' | 'column-reverse';
        if (alignItems) result.alignItems = alignItems as 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline';
        if (justifyContent) result.justifyContent = justifyContent as 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
        if (display) result.display = display as 'block' | 'inline' | 'inline-block' | 'flex' | 'grid' | 'none';
        if (gridTemplateColumns) result.gridTemplateColumns = gridTemplateColumns;
        if (gridGap) result.gridGap = gridGap;
        if (flexWrap) result.flexWrap = flexWrap as 'nowrap' | 'wrap' | 'wrap-reverse';

        return result;
    };

    const renderElement = () => {
        const baseStyle = getSafeStyles();

        switch (component.type) {
            case 'text':
                return (
                    <div style={baseStyle} className="element-content">
                        {component.props.text || '–¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞'}
                    </div>
                );
            case 'button':
                return (
                    <button style={baseStyle} className="element-content">
                        {component.props.text || '–ö–Ω–æ–ø–∫–∞'}
                    </button>
                );
            case 'image':
                return (
                    <div style={baseStyle} className="element-content">
                        <div className="image-preview">
                            <div className="image-icon">üñºÔ∏è</div>
                            <div className="image-caption">
                                {component.props.text || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
                            </div>
                        </div>
                    </div>
                );
            case 'header':
                return (
                    <header style={baseStyle} className="element-content header-element">
                        <div className="header-content">
                            <div className="logo">üè¢ {component.props.text || '–õ–æ–≥–æ—Ç–∏–ø'}</div>
                            <nav className="header-nav">
                                <span>–ì–ª–∞–≤–Ω–∞—è</span>
                                <span>–û –Ω–∞—Å</span>
                                <span>–ö–æ–Ω—Ç–∞–∫—Ç—ã</span>
                            </nav>
                        </div>
                    </header>
                );
            case 'footer':
                return (
                    <footer style={baseStyle} className="element-content footer-element">
                        <div className="footer-content">
                            <div>¬© 2024 {component.props.text || '–ú–æ–π —Å–∞–π—Ç'}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</div>
                            <div className="footer-links">
                                <span>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</span>
                                <span>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</span>
                            </div>
                        </div>
                    </footer>
                );
            case 'card':
                return (
                    <div style={baseStyle} className="element-content card-element">
                        <div className="card-header">
                            <h3>{component.props.text || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏'}</h3>
                        </div>
                        <div className="card-body">
                            <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.</p>
                        </div>
                        <div className="card-footer">
                            <button>–î–µ–π—Å—Ç–≤–∏–µ</button>
                        </div>
                    </div>
                );
            case 'form':
                return (
                    <div style={baseStyle} className="element-content form-element">
                        <h3>{component.props.text || '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'}</h3>
                        <div className="form-fields">
                            <input type="text" placeholder="–í–∞—à–µ –∏–º—è" />
                            <input type="email" placeholder="–í–∞—à email" />
                            <textarea placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"></textarea>
                            <button>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                        </div>
                    </div>
                );
            case 'input':
                return (
                    <div style={baseStyle} className="element-content input-element">
                        <input
                            type="text"
                            placeholder={component.props.placeholder || "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."}
                            style={{ width: '100%', padding: '8px', border: '1px solid #ddd', borderRadius: '4px' }}
                        />
                    </div>
                );
            case 'zeroblock':
                return (
                    <div style={baseStyle} className="element-content zeroblock-element">
                        <div className="zeroblock-preview">
                            <div className="zeroblock-icon">üéõÔ∏è</div>
                            <div className="zeroblock-title">ZeroBlock</div>
                            <div className="zeroblock-description">
                                {component.props.customHTML ? '–ö–∞—Å—Ç–æ–º–Ω—ã–π –±–ª–æ–∫' : '–ü—É—Å—Ç–æ–π –±–ª–æ–∫'}
                            </div>
                            {component.props.customHTML && (
                                <div className="zeroblock-badge">
                                    üíª –ï—Å—Ç—å –∫–æ–¥
                                </div>
                            )}
                        </div>
                    </div>
                );
            case 'section':
                return (
                    <div style={baseStyle} className="element-content section-element">
                        <div className="container-header">
                            <div className="container-icon">üì¶</div>
                            <div className="container-title">–°–µ–∫—Ü–∏—è</div>
                            <div className="container-description">
                                {component.children ? `${component.children.length} –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤` : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—é–¥–∞'}
                            </div>
                        </div>
                        <ContainerDropZone containerId={component.id}>
                            {component.children?.map((child) => (
                                <BuilderElement
                                    key={child.id}
                                    component={child}
                                    isSelected={isSelected}
                                    onSelect={onSelect}
                                    onDelete={onDelete}
                                    onUpdateComponent={onUpdateComponent}
                                    onCopyComponent={onCopyComponent}
                                    onDuplicateComponent={onDuplicateComponent}
                                    isPreviewMode={isPreviewMode}
                                />
                            ))}
                        </ContainerDropZone>
                    </div>
                );
            case 'grid':
                return (
                    <div style={baseStyle} className="element-content grid-element">
                        <div className="container-header">
                            <div className="container-icon">üî≤</div>
                            <div className="container-title">Grid –°–µ—Ç–∫–∞</div>
                            <div className="container-description">
                                {component.children ? `${component.children.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ` : 'CSS Grid –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'}
                            </div>
                        </div>
                        <ContainerDropZone containerId={component.id}>
                            {component.children?.map((child) => (
                                <BuilderElement
                                    key={child.id}
                                    component={child}
                                    isSelected={isSelected}
                                    onSelect={onSelect}
                                    onDelete={onDelete}
                                    onUpdateComponent={onUpdateComponent}
                                    onCopyComponent={onCopyComponent}
                                    onDuplicateComponent={onDuplicateComponent}
                                    isPreviewMode={isPreviewMode}
                                />
                            ))}
                        </ContainerDropZone>
                    </div>
                );
            case 'flex':
                return (
                    <div style={baseStyle} className="element-content flex-element">
                        <div className="container-header">
                            <div className="container-icon">üìè</div>
                            <div className="container-title">Flex –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</div>
                            <div className="container-description">
                                {component.children ? `${component.children.length} flex-—ç–ª–µ–º–µ–Ω—Ç–æ–≤` : 'CSS Flexbox –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'}
                            </div>
                        </div>
                        <ContainerDropZone containerId={component.id}>
                            {component.children?.map((child) => (
                                <BuilderElement
                                    key={child.id}
                                    component={child}
                                    isSelected={isSelected}
                                    onSelect={onSelect}
                                    onDelete={onDelete}
                                    onUpdateComponent={onUpdateComponent}
                                    onCopyComponent={onCopyComponent}
                                    onDuplicateComponent={onDuplicateComponent}
                                    isPreviewMode={isPreviewMode}
                                />
                            ))}
                        </ContainerDropZone>
                    </div>
                );
            case 'product-card':
                return (
                    <div style={baseStyle} className="element-content product-card-element">
                        <div className="product-image">
                            <div className="image-placeholder">üñºÔ∏è</div>
                        </div>
                        <div className="product-info">
                            <h3 className="product-title">{component.props.productName || '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'}</h3>
                            <p className="product-description">
                                {component.props.productDescription || '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'}
                            </p>
                            <div className="product-price">
                                {component.props.productPrice || '999'} {component.props.currency || '‚ÇΩ'}
                            </div>
                            <button className="buy-button">
                                {component.props.buttonText || '–í –∫–æ—Ä–∑–∏–Ω—É'}
                            </button>
                        </div>
                    </div>
                );
            case 'product-grid':
                return (
                    <div style={baseStyle} className="element-content product-grid-element">
                        <div className="grid-header">
                            <h3>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h3>
                            <p>–°–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</p>
                        </div>
                        <div className="products-container">
                            {/* –î–µ—Ç–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã */}
                            {component.children?.map((child) => (
                                <BuilderElement
                                    key={child.id}
                                    component={child}
                                    isSelected={isSelected}
                                    onSelect={onSelect}
                                    onDelete={onDelete}
                                    onUpdateComponent={onUpdateComponent}
                                    onCopyComponent={onCopyComponent}
                                    onDuplicateComponent={onDuplicateComponent}
                                    isPreviewMode={isPreviewMode}
                                />
                            ))}
                        </div>
                    </div>
                );
            case 'shopping-cart':
                return (
                    <div style={baseStyle} className="element-content shopping-cart-element">
                        <div className="cart-header">
                            <h3>üõí –ö–æ—Ä–∑–∏–Ω–∞</h3>
                            <div className="cart-count">3 —Ç–æ–≤–∞—Ä–∞</div>
                        </div>
                        <div className="cart-items">
                            <div className="cart-item">
                                <span>–¢–æ–≤–∞—Ä 1</span>
                                <span>999 ‚ÇΩ</span>
                            </div>
                            <div className="cart-item">
                                <span>–¢–æ–≤–∞—Ä 2</span>
                                <span>799 ‚ÇΩ</span>
                            </div>
                        </div>
                        <div className="cart-total">
                            <strong>–ò—Ç–æ–≥–æ: 1 798 ‚ÇΩ</strong>
                        </div>
                        <button className="checkout-button">
                            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                        </button>
                    </div>
                );
            case 'checkout-form':
                return (
                    <div style={baseStyle} className="element-content checkout-form-element">
                        <h3>üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
                        <div className="form-fields">
                            <input type="text" placeholder="–§–ò–û" />
                            <input type="email" placeholder="Email" />
                            <input type="tel" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" />
                            <input type="text" placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" />
                            <select>
                                <option>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</option>
                                <option>–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω</option>
                                <option>–ù–∞–ª–∏—á–Ω—ã–º–∏</option>
                            </select>
                            <button className="submit-order">–ó–∞–∫–∞–∑–∞—Ç—å</button>
                        </div>
                    </div>
                );
            case 'product-rating':
                const rating = component.props.rating || 4;
                return (
                    <div style={baseStyle} className="element-content product-rating-element">
                        <div className="stars">
                            {[1, 2, 3, 4, 5].map((star) => (
                                <span key={star} className={star <= rating ? 'star filled' : 'star'}>
                                    {star <= rating ? '‚≠ê' : '‚òÜ'}
                                </span>
                            ))}
                        </div>
                        <span className="rating-text">({rating}.0)</span>
                    </div>
                );
            default:
                return null;
        }
    };

    return (
        <div
            ref={setNodeRef}
            style={style}
            className={`builder-element ${isSelected ? 'selected' : ''} ${isDragging ? 'dragging' : ''} ${isPreviewMode ? 'preview' : ''}`}
            onClick={handleClick}
        >
            {/* –†—É—á–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ */}
            {!isPreviewMode && (
                <div
                    className="drag-handle"
                    {...attributes}
                    {...listeners}
                    title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞"
                    onClick={(e) => e.stopPropagation()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ä—É—á–∫—É
                >
                    ‚ãÆ‚ãÆ
                </div>
            )}

            {renderElement()}

            {isSelected && !isPreviewMode && (
                <>
                    <div className="element-badge">
                        {getElementTypeLabel(component.type)}
                    </div>
                    <button
                        className="element-delete-btn"
                        onClick={handleDelete}
                        title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
                    >
                        üóëÔ∏è
                    </button>
                </>
            )}
        </div>
    );
};

export default BuilderElement;