import React, { useState, useCallback, useRef, useEffect } from 'react';
import { BuilderElement, Container, Project, DragState, AlignmentGuide } from '../../types/types';
import { BuilderElement as ElementComponent } from './BuilderElement';
import { ContainerDropZone } from './ContainerDropZone';
import { AlignmentGuides } from './AlignmentGuides';
import { GridOverlay } from './GridOverlay';
import { useAlignmentGuides } from '../../hooks/useAlignmentGuides';
import { useTheme } from '../../contexts/ThemeContext';
import './Builder.css';

interface BuilderProps {
    project: Project;
    onProjectUpdate: (project: Project) => void;
    selectedElement: BuilderElement | null;
    onElementSelect: (element: BuilderElement | null) => void;
    selectedContainer: Container | null;
    onContainerSelect: (container: Container | null) => void;
    mode: 'edit' | 'preview';
    onModeChange?: (mode: 'edit' | 'preview') => void;
}

export const Builder: React.FC<BuilderProps> = ({
    project,
    onProjectUpdate,
    selectedElement,
    onElementSelect,
    selectedContainer,
    onContainerSelect,
    mode,
    onModeChange
}) => {
    const [dragState, setDragState] = useState<DragState>({
        isDragging: false,
        elementType: '',
        elementData: null,
        source: 'palette'
    });

    const [activeGuides, setActiveGuides] = useState<AlignmentGuide[]>([]);
    const [snapLines, setSnapLines] = useState<{ vertical: number[]; horizontal: number[] }>({ vertical: [], horizontal: [] });
    const containerRef = useRef<HTMLDivElement>(null);
    const { theme } = useTheme();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    const { guides, calculateGuides, clearGuides, updateVisibleGuides } = useAlignmentGuides({
        container: selectedContainer || project.containers[0],
        snapThreshold: project.settings.snapThreshold || 5,
        enabled: project.settings.snap
    });

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–∏–ª–∏ –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω)
    const activeContainer = selectedContainer || project.containers[0];

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleElementMove = useCallback((elementId: string, newPosition: Partial<BuilderElement['position']>) => {
        const updatedContainers = project.containers.map(container => ({
            ...container,
            elements: container.elements.map(element =>
                element.id === elementId
                    ? { ...element, position: { ...element.position, ...newPosition } }
                    : element
            )
        }));

        onProjectUpdate({ ...project, containers: updatedContainers });
    }, [project, onProjectUpdate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleElementResize = useCallback((elementId: string, size: { width: number; height: number }) => {
        const updatedContainers = project.containers.map(container => ({
            ...container,
            elements: container.elements.map(element =>
                element.id === elementId
                    ? { ...element, position: { ...element.position, ...size } }
                    : element
            )
        }));

        onProjectUpdate({ ...project, containers: updatedContainers });
    }, [project, onProjectUpdate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleElementUpdate = useCallback((elementId: string, updates: Partial<BuilderElement>) => {
        const updatedContainers = project.containers.map(container => ({
            ...container,
            elements: container.elements.map(element =>
                element.id === elementId
                    ? { ...element, ...updates }
                    : element
            )
        }));

        onProjectUpdate({ ...project, containers: updatedContainers });
    }, [project, onProjectUpdate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleElementAdd = useCallback((elementType: string, containerId: string, position: { x: number; y: number }) => {
        const defaultElements: Record<string, Partial<BuilderElement>> = {
            text: {
                type: 'text',
                content: '–¢–µ–∫—Å—Ç',
                style: {
                    fontSize: 16,
                    color: theme.getColor('text'),
                    padding: '8px'
                },
                metadata: {
                    name: '–¢–µ–∫—Å—Ç',
                    icon: 'üìù',
                    category: 'content',
                    canHaveChildren: false,
                    resizable: true,
                    draggable: true
                }
            },
            heading: {
                type: 'heading',
                content: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                style: {
                    fontSize: 24,
                    fontWeight: 'bold',
                    color: theme.getColor('text'),
                    padding: '12px'
                },
                props: { level: 'h1' },
                metadata: {
                    name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                    icon: 'üî§',
                    category: 'content',
                    canHaveChildren: false,
                    resizable: true,
                    draggable: true
                }
            },
            button: {
                type: 'button',
                content: '–ö–Ω–æ–ø–∫–∞',
                style: {
                    backgroundColor: theme.getColor('primary'),
                    color: 'white',
                    padding: '12px 24px',
                    border: 'none',
                    borderRadius: theme.getBorderRadius('md'),
                    fontSize: 16,
                    fontWeight: 'bold',
                    cursor: 'pointer'
                },
                metadata: {
                    name: '–ö–Ω–æ–ø–∫–∞',
                    icon: 'üîò',
                    category: 'content',
                    canHaveChildren: false,
                    resizable: true,
                    draggable: true
                }
            },
            image: {
                type: 'image',
                content: 'https://via.placeholder.com/200x100',
                style: {
                    objectFit: 'cover'
                },
                props: {
                    alt: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    src: 'https://via.placeholder.com/200x100'
                },
                metadata: {
                    name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    icon: 'üñºÔ∏è',
                    category: 'media',
                    canHaveChildren: false,
                    resizable: true,
                    draggable: true
                }
            },
            container: {
                type: 'container',
                content: '',
                style: {
                    backgroundColor: theme.getColor('surface'),
                    border: `1px dashed ${theme.getColor('border')}`,
                    padding: '20px',
                    minHeight: '100px'
                },
                metadata: {
                    name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
                    icon: 'üì¶',
                    category: 'layout',
                    canHaveChildren: true,
                    resizable: true,
                    draggable: true,
                    isContainer: true
                }
            }
        };

        const elementConfig = defaultElements[elementType] || defaultElements.text;

        const newElement: BuilderElement = {
            id: `element-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            containerId,
            position: {
                x: position.x,
                y: position.y,
                width: elementConfig.metadata?.defaultSize?.width || 200,
                height: elementConfig.metadata?.defaultSize?.height || 100,
                zIndex: 1
            },
            ...elementConfig
        } as BuilderElement;

        const updatedContainers = project.containers.map(container =>
            container.id === containerId
                ? { ...container, elements: [...container.elements, newElement] }
                : container
        );

        onProjectUpdate({ ...project, containers: updatedContainers });
        onElementSelect(newElement);
    }, [project, onProjectUpdate, onElementSelect, theme]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleElementDelete = useCallback((elementId: string) => {
        const updatedContainers = project.containers.map(container => ({
            ...container,
            elements: container.elements.filter(element => element.id !== elementId)
        }));

        onProjectUpdate({ ...project, containers: updatedContainers });

        if (selectedElement?.id === elementId) {
            onElementSelect(null);
        }
    }, [project, onProjectUpdate, selectedElement, onElementSelect]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleElementDuplicate = useCallback((elementId: string) => {
        const elementToDuplicate = project.containers
            .flatMap(container => container.elements)
            .find(element => element.id === elementId);

        if (!elementToDuplicate) return;

        const duplicatedElement: BuilderElement = {
            ...elementToDuplicate,
            id: `element-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            position: {
                ...elementToDuplicate.position,
                x: elementToDuplicate.position.x + 20,
                y: elementToDuplicate.position.y + 20
            }
        };

        const updatedContainers = project.containers.map(container =>
            container.id === elementToDuplicate.containerId
                ? { ...container, elements: [...container.elements, duplicatedElement] }
                : container
        );

        onProjectUpdate({ ...project, containers: updatedContainers });
        onElementSelect(duplicatedElement);
    }, [project, onProjectUpdate, onElementSelect]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
    const handleElementMoveBetweenContainers = useCallback((elementId: string, newContainerId: string, position: { x: number; y: number }) => {
        let elementToMove: BuilderElement | undefined;

        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const containersWithElementRemoved = project.containers.map(container => {
            const elementIndex = container.elements.findIndex(el => el.id === elementId);
            if (elementIndex !== -1) {
                elementToMove = container.elements[elementIndex];
                return {
                    ...container,
                    elements: container.elements.filter(el => el.id !== elementId)
                };
            }
            return container;
        });

        if (!elementToMove) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const updatedContainers = containersWithElementRemoved.map(container =>
            container.id === newContainerId
                ? {
                    ...container,
                    elements: [...container.elements, {
                        ...elementToMove!,
                        containerId: newContainerId,
                        position: { ...elementToMove!.position, ...position }
                    }]
                }
                : container
        );

        onProjectUpdate({ ...project, containers: updatedContainers });
    }, [project, onProjectUpdate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const handleContainerUpdate = useCallback((containerId: string, updates: Partial<Container>) => {
        const updatedContainers = project.containers.map(container =>
            container.id === containerId ? { ...container, ...updates } : container
        );

        onProjectUpdate({ ...project, containers: updatedContainers });
    }, [project, onProjectUpdate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
    const handleContainerClick = useCallback((e: React.MouseEvent, container: Container) => {
        if (mode !== 'edit') return;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (e.target === e.currentTarget) {
            onElementSelect(null);
            onContainerSelect(container);
        }
    }, [mode, onElementSelect, onContainerSelect]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö
    const handleCalculateGuides = useCallback((movingElement: BuilderElement, allElements: BuilderElement[], containerRect: DOMRect) => {
        if (!project.settings.snap) {
            return { guides: [], snappedPosition: { x: movingElement.position.x, y: movingElement.position.y }, snapLines: { vertical: [], horizontal: [] } };
        }

        const result = calculateGuides(movingElement, allElements, containerRect);
        setActiveGuides(result.guides);
        setSnapLines(result.snapLines);

        return result;
    }, [project.settings.snap, calculateGuides]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const handleDragStateChange = useCallback((newDragState: DragState) => {
        setDragState(newDragState);

        if (!newDragState.isDragging) {
            clearGuides();
            setActiveGuides([]);
            setSnapLines({ vertical: [], horizontal: [] });
        }
    }, [clearGuides]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    useEffect(() => {
        const handleKeyDown = (e: KeyboardEvent) => {
            if (mode !== 'edit') return;

            // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if ((e.key === 'Delete' || e.key === 'Backspace') && selectedElement) {
                e.preventDefault();
                handleElementDelete(selectedElement.id);
            }

            // –û—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if (e.key === 'Escape' && selectedElement) {
                onElementSelect(null);
            }

            // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (e.key === 'd' && (e.ctrlKey || e.metaKey) && selectedElement) {
                e.preventDefault();
                handleElementDuplicate(selectedElement.id);
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (e.key === 'Tab' && e.ctrlKey) {
                e.preventDefault();
                onModeChange?.(mode === 'edit' ? 'preview' : 'edit');
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [mode, selectedElement, handleElementDelete, handleElementDuplicate, onElementSelect, onModeChange]);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ BuilderElement
    const getAllElements = useCallback(() => {
        return project.containers.flatMap(container => container.elements);
    }, [project.containers]);

    // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const renderContainers = () => {
        return project.containers.map(container => (
            <div
                key={container.id}
                className={`builder-container ${container.type} ${selectedContainer?.id === container.id ? 'selected' : ''}`}
                onClick={(e) => handleContainerClick(e, container)}
            >
                <ContainerDropZone
                    container={container}
                    onElementAdd={handleElementAdd}
                    onElementMove={handleElementMoveBetweenContainers}
                    onContainerUpdate={handleContainerUpdate}
                    mode={mode}
                    isActive={mode === 'edit'}
                    dragState={dragState}
                    onDragStateChange={handleDragStateChange}
                >
                    {container.elements.map(element => (
                        <ElementComponent
                            key={element.id}
                            element={element}
                            isSelected={selectedElement?.id === element.id}
                            onSelect={onElementSelect}
                            onMove={handleElementMove}
                            onDelete={handleElementDelete}
                            onUpdate={handleElementUpdate}
                            onDuplicate={handleElementDuplicate}
                            onResize={handleElementResize}
                            mode={mode}
                            onDragStateChange={handleDragStateChange}
                            calculateGuides={handleCalculateGuides}
                            containerRect={containerRef.current?.getBoundingClientRect()}
                            allElements={getAllElements()}
                        />
                    ))}
                </ContainerDropZone>

                {/* –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
                {mode === 'edit' && activeGuides.length > 0 && (
                    <AlignmentGuides
                        guides={activeGuides}
                        snapLines={snapLines}
                        containerRect={containerRef.current?.getBoundingClientRect()}
                    />
                )}
            </div>
        ));
    };

    const builderStyle: React.CSSProperties = {
        backgroundColor: project.settings.pageBackground || theme.getColor('background'),
        backgroundImage: project.settings.pageBackgroundImage ? `url(${project.settings.pageBackgroundImage})` : undefined,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh'
    };

    return (
        <div
            className={`builder ${mode} ${project.settings.viewport}`}
            style={builderStyle}
            ref={containerRef}
        >
            {/* –°–µ—Ç–∫–∞ */}
            {project.settings.grid && mode === 'edit' && <GridOverlay />}

            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */}
            <div className="builder-containers">
                {renderContainers()}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ */}
            {mode === 'edit' && (
                <div className="builder-mode-indicator">
                    <div className="mode-indicator-content">
                        <span className="mode-text">–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</span>
                        <span className="viewport-text">
                            {project.settings.viewport === 'desktop' && 'üñ•Ô∏è Desktop'}
                            {project.settings.viewport === 'tablet' && 'üì± Tablet'}
                            {project.settings.viewport === 'mobile' && 'üì± Mobile'}
                        </span>
                        <span className="hint-text">
                            Tab –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ ‚Ä¢ Delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        </span>
                    </div>
                </div>
            )}

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ */}
            {project.containers.every(container => container.elements.length === 0) && mode === 'edit' && (
                <div className="builder-empty-state">
                    <div className="empty-state-content">
                        <div className="empty-state-icon">üöÄ</div>
                        <h2 className="empty-state-title">–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π —Å–∞–π—Ç</h2>
                        <p className="empty-state-description">
                            –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                        </p>
                        <div className="empty-state-actions">
                            <button className="action-button primary">
                                üìÅ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω
                            </button>
                            <button className="action-button secondary">
                                üé® –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª–∏
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Builder;