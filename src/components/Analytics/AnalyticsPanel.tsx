import React from 'react';
import { Component } from '../../types/types';
import './AnalyticsPanel.css';

interface AnalyticsPanelProps {
    components: Component[];
    isOpen: boolean;
    onClose: () => void;
}

const AnalyticsPanel: React.FC<AnalyticsPanelProps> = ({ components, isOpen, onClose }) => {
    if (!isOpen) return null;

    const componentStats = components.reduce((acc, component) => {
        acc[component.type] = (acc[component.type] || 0) + 1;
        return acc;
    }, {} as Record<string, number>);

    const totalComponents = components.length;
    const mostUsedType = Object.entries(componentStats).sort((a, b) => b[1] - a[1])[0];

    return (
        <div className="analytics-overlay">
            <div className="analytics-panel">
                <div className="analytics-header">
                    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>
                    <button className="close-btn" onClick={onClose}>‚úï</button>
                </div>

                <div className="analytics-content">
                    <div className="stat-card">
                        <div className="stat-value">{totalComponents}</div>
                        <div className="stat-label">–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
                    </div>

                    <div className="stat-card">
                        <div className="stat-value">{mostUsedType ? mostUsedType[1] : 0}</div>
                        <div className="stat-label">
                            {mostUsedType ? `–ß–∞—â–µ –≤—Å–µ–≥–æ: ${getComponentName(mostUsedType[0])}` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                        </div>
                    </div>

                    <div className="distribution">
                        <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:</h3>
                        {Object.entries(componentStats).map(([type, count]) => (
                            <div key={type} className="distribution-item">
                                <span className="type-name">{getComponentName(type)}</span>
                                <span className="type-count">{count}</span>
                                <div
                                    className="type-bar"
                                    style={{ width: `${(count / totalComponents) * 100}%` }}
                                />
                            </div>
                        ))}
                    </div>

                    <div className="export-stats">
                        <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
                        <ul>
                            {totalComponents === 0 && <li>üéØ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</li>}
                            {totalComponents > 10 && <li>üìù –ú–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É</li>}
                            {mostUsedType && mostUsedType[1] > 5 && (
                                <li>‚ö° –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ "{getComponentName(mostUsedType[0])}" - —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω</li>
                            )}
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    );
};

const getComponentName = (type: string) => {
    const names: Record<string, string> = {
        text: '–¢–µ–∫—Å—Ç',
        button: '–ö–Ω–æ–ø–∫–∞',
        image: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        header: '–®–∞–ø–∫–∞',
        footer: '–ü–æ–¥–≤–∞–ª',
        card: '–ö–∞—Ä—Ç–æ—á–∫–∞',
        form: '–§–æ—Ä–º–∞',
        input: '–ü–æ–ª–µ –≤–≤–æ–¥–∞'
    };
    return names[type] || type;
};

export default AnalyticsPanel;